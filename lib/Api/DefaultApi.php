<?php
/**
 * DefaultApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhereAPI
 *
 * WhereWhere.cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Wherewhere\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Wherewhere\ApiException;
use Wherewhere\Configuration;
use Wherewhere\HeaderSelector;
use Wherewhere\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountAuthorizeDevicePost
     *
     * 授权设备
     *
     * @param  string $is_all 是否授权全部设备 (required)
     * @param  string $account_id account_id (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountAuthorizeDevicePost($is_all, $account_id, $imei_list = null)
    {
        list($response) = $this->accountAuthorizeDevicePostWithHttpInfo($is_all, $account_id, $imei_list);
        return $response;
    }

    /**
     * Operation accountAuthorizeDevicePostWithHttpInfo
     *
     * 授权设备
     *
     * @param  string $is_all 是否授权全部设备 (required)
     * @param  string $account_id (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountAuthorizeDevicePostWithHttpInfo($is_all, $account_id, $imei_list = null)
    {
        $request = $this->accountAuthorizeDevicePostRequest($is_all, $account_id, $imei_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountAuthorizeDevicePostAsync
     *
     * 授权设备
     *
     * @param  string $is_all 是否授权全部设备 (required)
     * @param  string $account_id (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountAuthorizeDevicePostAsync($is_all, $account_id, $imei_list = null)
    {
        return $this->accountAuthorizeDevicePostAsyncWithHttpInfo($is_all, $account_id, $imei_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountAuthorizeDevicePostAsyncWithHttpInfo
     *
     * 授权设备
     *
     * @param  string $is_all 是否授权全部设备 (required)
     * @param  string $account_id (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountAuthorizeDevicePostAsyncWithHttpInfo($is_all, $account_id, $imei_list = null)
    {
        $returnType = 'object';
        $request = $this->accountAuthorizeDevicePostRequest($is_all, $account_id, $imei_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountAuthorizeDevicePost'
     *
     * @param  string $is_all 是否授权全部设备 (required)
     * @param  string $account_id (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountAuthorizeDevicePostRequest($is_all, $account_id, $imei_list = null)
    {
        // verify the required parameter 'is_all' is set
        if ($is_all === null || (is_array($is_all) && count($is_all) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_all when calling accountAuthorizeDevicePost'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountAuthorizeDevicePost'
            );
        }

        $resourcePath = '/account/authorize_device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($imei_list !== null) {
            $formParams['imei_list'] = ObjectSerializer::toFormValue($imei_list);
        }
        // form params
        if ($is_all !== null) {
            $formParams['is_all'] = ObjectSerializer::toFormValue($is_all);
        }
        // form params
        if ($account_id !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($account_id);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountChangePasswordPost
     *
     * 修改密码
     *
     * @param  string $old_password 旧密码 (required)
     * @param  string $new_password 新密码 (required)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountChangePasswordPost($old_password, $new_password)
    {
        list($response) = $this->accountChangePasswordPostWithHttpInfo($old_password, $new_password);
        return $response;
    }

    /**
     * Operation accountChangePasswordPostWithHttpInfo
     *
     * 修改密码
     *
     * @param  string $old_password 旧密码 (required)
     * @param  string $new_password 新密码 (required)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountChangePasswordPostWithHttpInfo($old_password, $new_password)
    {
        $request = $this->accountChangePasswordPostRequest($old_password, $new_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountChangePasswordPostAsync
     *
     * 修改密码
     *
     * @param  string $old_password 旧密码 (required)
     * @param  string $new_password 新密码 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountChangePasswordPostAsync($old_password, $new_password)
    {
        return $this->accountChangePasswordPostAsyncWithHttpInfo($old_password, $new_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountChangePasswordPostAsyncWithHttpInfo
     *
     * 修改密码
     *
     * @param  string $old_password 旧密码 (required)
     * @param  string $new_password 新密码 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountChangePasswordPostAsyncWithHttpInfo($old_password, $new_password)
    {
        $returnType = 'object';
        $request = $this->accountChangePasswordPostRequest($old_password, $new_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountChangePasswordPost'
     *
     * @param  string $old_password 旧密码 (required)
     * @param  string $new_password 新密码 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountChangePasswordPostRequest($old_password, $new_password)
    {
        // verify the required parameter 'old_password' is set
        if ($old_password === null || (is_array($old_password) && count($old_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $old_password when calling accountChangePasswordPost'
            );
        }
        // verify the required parameter 'new_password' is set
        if ($new_password === null || (is_array($new_password) && count($new_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_password when calling accountChangePasswordPost'
            );
        }

        $resourcePath = '/account/change_password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($old_password !== null) {
            $formParams['old_password'] = ObjectSerializer::toFormValue($old_password);
        }
        // form params
        if ($new_password !== null) {
            $formParams['new_password'] = ObjectSerializer::toFormValue($new_password);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountCreatePost
     *
     * 添加子账号
     *
     * @param  string $username 用户名，可以是邮箱或者手机 (required)
     * @param  string $password password (required)
     * @param  string $account_name 账户名称 (required)
     * @param  string $remark 公司名称 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2005
     */
    public function accountCreatePost($username, $password, $account_name, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        list($response) = $this->accountCreatePostWithHttpInfo($username, $password, $account_name, $remark, $active_time, $contact_phone, $contact_email);
        return $response;
    }

    /**
     * Operation accountCreatePostWithHttpInfo
     *
     * 添加子账号
     *
     * @param  string $username 用户名，可以是邮箱或者手机 (required)
     * @param  string $password (required)
     * @param  string $account_name 账户名称 (required)
     * @param  string $remark 公司名称 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountCreatePostWithHttpInfo($username, $password, $account_name, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        $request = $this->accountCreatePostRequest($username, $password, $account_name, $remark, $active_time, $contact_phone, $contact_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2005' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2005', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2005';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountCreatePostAsync
     *
     * 添加子账号
     *
     * @param  string $username 用户名，可以是邮箱或者手机 (required)
     * @param  string $password (required)
     * @param  string $account_name 账户名称 (required)
     * @param  string $remark 公司名称 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCreatePostAsync($username, $password, $account_name, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        return $this->accountCreatePostAsyncWithHttpInfo($username, $password, $account_name, $remark, $active_time, $contact_phone, $contact_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountCreatePostAsyncWithHttpInfo
     *
     * 添加子账号
     *
     * @param  string $username 用户名，可以是邮箱或者手机 (required)
     * @param  string $password (required)
     * @param  string $account_name 账户名称 (required)
     * @param  string $remark 公司名称 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountCreatePostAsyncWithHttpInfo($username, $password, $account_name, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2005';
        $request = $this->accountCreatePostRequest($username, $password, $account_name, $remark, $active_time, $contact_phone, $contact_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountCreatePost'
     *
     * @param  string $username 用户名，可以是邮箱或者手机 (required)
     * @param  string $password (required)
     * @param  string $account_name 账户名称 (required)
     * @param  string $remark 公司名称 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountCreatePostRequest($username, $password, $account_name, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling accountCreatePost'
            );
        }
        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling accountCreatePost'
            );
        }
        // verify the required parameter 'account_name' is set
        if ($account_name === null || (is_array($account_name) && count($account_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_name when calling accountCreatePost'
            );
        }

        $resourcePath = '/account/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($account_name !== null) {
            $formParams['account_name'] = ObjectSerializer::toFormValue($account_name);
        }
        // form params
        if ($remark !== null) {
            $formParams['remark'] = ObjectSerializer::toFormValue($remark);
        }
        // form params
        if ($active_time !== null) {
            $formParams['active_time'] = ObjectSerializer::toFormValue($active_time);
        }
        // form params
        if ($contact_phone !== null) {
            $formParams['contact_phone'] = ObjectSerializer::toFormValue($contact_phone);
        }
        // form params
        if ($contact_email !== null) {
            $formParams['contact_email'] = ObjectSerializer::toFormValue($contact_email);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountRemoveDevicePost
     *
     * 移除设备
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $is_all 是否移除所有设备 (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountRemoveDevicePost($account_id, $is_all, $imei_list = null)
    {
        list($response) = $this->accountRemoveDevicePostWithHttpInfo($account_id, $is_all, $imei_list);
        return $response;
    }

    /**
     * Operation accountRemoveDevicePostWithHttpInfo
     *
     * 移除设备
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $is_all 是否移除所有设备 (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountRemoveDevicePostWithHttpInfo($account_id, $is_all, $imei_list = null)
    {
        $request = $this->accountRemoveDevicePostRequest($account_id, $is_all, $imei_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountRemoveDevicePostAsync
     *
     * 移除设备
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $is_all 是否移除所有设备 (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRemoveDevicePostAsync($account_id, $is_all, $imei_list = null)
    {
        return $this->accountRemoveDevicePostAsyncWithHttpInfo($account_id, $is_all, $imei_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountRemoveDevicePostAsyncWithHttpInfo
     *
     * 移除设备
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $is_all 是否移除所有设备 (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRemoveDevicePostAsyncWithHttpInfo($account_id, $is_all, $imei_list = null)
    {
        $returnType = 'object';
        $request = $this->accountRemoveDevicePostRequest($account_id, $is_all, $imei_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountRemoveDevicePost'
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $is_all 是否移除所有设备 (required)
     * @param  int $imei_list 设备列表 多个用,隔开 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountRemoveDevicePostRequest($account_id, $is_all, $imei_list = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountRemoveDevicePost'
            );
        }
        // verify the required parameter 'is_all' is set
        if ($is_all === null || (is_array($is_all) && count($is_all) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_all when calling accountRemoveDevicePost'
            );
        }

        $resourcePath = '/account/remove_device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($account_id !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($account_id);
        }
        // form params
        if ($imei_list !== null) {
            $formParams['imei_list'] = ObjectSerializer::toFormValue($imei_list);
        }
        // form params
        if ($is_all !== null) {
            $formParams['is_all'] = ObjectSerializer::toFormValue($is_all);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountSetStatusPost
     *
     * 禁用/启用子账号
     *
     * @param  string $account_id 子账号id (required)
     * @param  int $status 1启用 0 禁用 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountSetStatusPost($account_id, $status = null)
    {
        list($response) = $this->accountSetStatusPostWithHttpInfo($account_id, $status);
        return $response;
    }

    /**
     * Operation accountSetStatusPostWithHttpInfo
     *
     * 禁用/启用子账号
     *
     * @param  string $account_id 子账号id (required)
     * @param  int $status 1启用 0 禁用 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountSetStatusPostWithHttpInfo($account_id, $status = null)
    {
        $request = $this->accountSetStatusPostRequest($account_id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountSetStatusPostAsync
     *
     * 禁用/启用子账号
     *
     * @param  string $account_id 子账号id (required)
     * @param  int $status 1启用 0 禁用 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountSetStatusPostAsync($account_id, $status = null)
    {
        return $this->accountSetStatusPostAsyncWithHttpInfo($account_id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountSetStatusPostAsyncWithHttpInfo
     *
     * 禁用/启用子账号
     *
     * @param  string $account_id 子账号id (required)
     * @param  int $status 1启用 0 禁用 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountSetStatusPostAsyncWithHttpInfo($account_id, $status = null)
    {
        $returnType = 'object';
        $request = $this->accountSetStatusPostRequest($account_id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountSetStatusPost'
     *
     * @param  string $account_id 子账号id (required)
     * @param  int $status 1启用 0 禁用 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountSetStatusPostRequest($account_id, $status = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountSetStatusPost'
            );
        }

        $resourcePath = '/account/set_status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($account_id !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($account_id);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountUpdatePost
     *
     * 修改子账户
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $username 登录名称 (optional)
     * @param  string $account_name 账号名称 (optional)
     * @param  string $password 密码 (optional)
     * @param  string $remark 备注 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountUpdatePost($account_id, $username = null, $account_name = null, $password = null, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        list($response) = $this->accountUpdatePostWithHttpInfo($account_id, $username, $account_name, $password, $remark, $active_time, $contact_phone, $contact_email);
        return $response;
    }

    /**
     * Operation accountUpdatePostWithHttpInfo
     *
     * 修改子账户
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $username 登录名称 (optional)
     * @param  string $account_name 账号名称 (optional)
     * @param  string $password 密码 (optional)
     * @param  string $remark 备注 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountUpdatePostWithHttpInfo($account_id, $username = null, $account_name = null, $password = null, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        $request = $this->accountUpdatePostRequest($account_id, $username, $account_name, $password, $remark, $active_time, $contact_phone, $contact_email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountUpdatePostAsync
     *
     * 修改子账户
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $username 登录名称 (optional)
     * @param  string $account_name 账号名称 (optional)
     * @param  string $password 密码 (optional)
     * @param  string $remark 备注 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdatePostAsync($account_id, $username = null, $account_name = null, $password = null, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        return $this->accountUpdatePostAsyncWithHttpInfo($account_id, $username, $account_name, $password, $remark, $active_time, $contact_phone, $contact_email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountUpdatePostAsyncWithHttpInfo
     *
     * 修改子账户
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $username 登录名称 (optional)
     * @param  string $account_name 账号名称 (optional)
     * @param  string $password 密码 (optional)
     * @param  string $remark 备注 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdatePostAsyncWithHttpInfo($account_id, $username = null, $account_name = null, $password = null, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        $returnType = 'object';
        $request = $this->accountUpdatePostRequest($account_id, $username, $account_name, $password, $remark, $active_time, $contact_phone, $contact_email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountUpdatePost'
     *
     * @param  string $account_id 子账号id (required)
     * @param  string $username 登录名称 (optional)
     * @param  string $account_name 账号名称 (optional)
     * @param  string $password 密码 (optional)
     * @param  string $remark 备注 (optional)
     * @param  string $active_time 有效日期 (optional)
     * @param  string $contact_phone 联系手机 (optional)
     * @param  string $contact_email 联系邮箱 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountUpdatePostRequest($account_id, $username = null, $account_name = null, $password = null, $remark = null, $active_time = null, $contact_phone = null, $contact_email = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling accountUpdatePost'
            );
        }

        $resourcePath = '/account/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($account_id !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($account_id);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }
        // form params
        if ($account_name !== null) {
            $formParams['account_name'] = ObjectSerializer::toFormValue($account_name);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($remark !== null) {
            $formParams['remark'] = ObjectSerializer::toFormValue($remark);
        }
        // form params
        if ($active_time !== null) {
            $formParams['active_time'] = ObjectSerializer::toFormValue($active_time);
        }
        // form params
        if ($contact_phone !== null) {
            $formParams['contact_phone'] = ObjectSerializer::toFormValue($contact_phone);
        }
        // form params
        if ($contact_email !== null) {
            $formParams['contact_email'] = ObjectSerializer::toFormValue($contact_email);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGet
     *
     * 子账户列表
     *
     * @param  int $is_include_self 是否包含主账号本身 (required)
     * @param  string $account_id 子账号id (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2002
     */
    public function accountsGet($is_include_self, $account_id = null)
    {
        list($response) = $this->accountsGetWithHttpInfo($is_include_self, $account_id);
        return $response;
    }

    /**
     * Operation accountsGetWithHttpInfo
     *
     * 子账户列表
     *
     * @param  int $is_include_self 是否包含主账号本身 (required)
     * @param  string $account_id 子账号id (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetWithHttpInfo($is_include_self, $account_id = null)
    {
        $request = $this->accountsGetRequest($is_include_self, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2002' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2002';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetAsync
     *
     * 子账户列表
     *
     * @param  int $is_include_self 是否包含主账号本身 (required)
     * @param  string $account_id 子账号id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsync($is_include_self, $account_id = null)
    {
        return $this->accountsGetAsyncWithHttpInfo($is_include_self, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetAsyncWithHttpInfo
     *
     * 子账户列表
     *
     * @param  int $is_include_self 是否包含主账号本身 (required)
     * @param  string $account_id 子账号id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsyncWithHttpInfo($is_include_self, $account_id = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2002';
        $request = $this->accountsGetRequest($is_include_self, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGet'
     *
     * @param  int $is_include_self 是否包含主账号本身 (required)
     * @param  string $account_id 子账号id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetRequest($is_include_self, $account_id = null)
    {
        // verify the required parameter 'is_include_self' is set
        if ($is_include_self === null || (is_array($is_include_self) && count($is_include_self) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_include_self when calling accountsGet'
            );
        }

        $resourcePath = '/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($is_include_self !== null) {
            if('form' === 'form' && is_array($is_include_self)) {
                foreach($is_include_self as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_include_self'] = $is_include_self;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deviceCreatePost
     *
     * 添加设备
     *
     * @param  string $imei 设备唯一识别号 (required)
     * @param  string $mark 设备备注，可以是车牌号，最长100个字符 (required)
     * @param  string $tags 标签名称，默认为空，支持多个标签，用逗号隔开，最多支持10个标签 (optional)
     * @param  string $account_id 子账号 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2004
     */
    public function deviceCreatePost($imei, $mark, $tags = null, $account_id = null)
    {
        list($response) = $this->deviceCreatePostWithHttpInfo($imei, $mark, $tags, $account_id);
        return $response;
    }

    /**
     * Operation deviceCreatePostWithHttpInfo
     *
     * 添加设备
     *
     * @param  string $imei 设备唯一识别号 (required)
     * @param  string $mark 设备备注，可以是车牌号，最长100个字符 (required)
     * @param  string $tags 标签名称，默认为空，支持多个标签，用逗号隔开，最多支持10个标签 (optional)
     * @param  string $account_id 子账号 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function deviceCreatePostWithHttpInfo($imei, $mark, $tags = null, $account_id = null)
    {
        $request = $this->deviceCreatePostRequest($imei, $mark, $tags, $account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2004' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2004', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2004';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deviceCreatePostAsync
     *
     * 添加设备
     *
     * @param  string $imei 设备唯一识别号 (required)
     * @param  string $mark 设备备注，可以是车牌号，最长100个字符 (required)
     * @param  string $tags 标签名称，默认为空，支持多个标签，用逗号隔开，最多支持10个标签 (optional)
     * @param  string $account_id 子账号 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deviceCreatePostAsync($imei, $mark, $tags = null, $account_id = null)
    {
        return $this->deviceCreatePostAsyncWithHttpInfo($imei, $mark, $tags, $account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deviceCreatePostAsyncWithHttpInfo
     *
     * 添加设备
     *
     * @param  string $imei 设备唯一识别号 (required)
     * @param  string $mark 设备备注，可以是车牌号，最长100个字符 (required)
     * @param  string $tags 标签名称，默认为空，支持多个标签，用逗号隔开，最多支持10个标签 (optional)
     * @param  string $account_id 子账号 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deviceCreatePostAsyncWithHttpInfo($imei, $mark, $tags = null, $account_id = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2004';
        $request = $this->deviceCreatePostRequest($imei, $mark, $tags, $account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deviceCreatePost'
     *
     * @param  string $imei 设备唯一识别号 (required)
     * @param  string $mark 设备备注，可以是车牌号，最长100个字符 (required)
     * @param  string $tags 标签名称，默认为空，支持多个标签，用逗号隔开，最多支持10个标签 (optional)
     * @param  string $account_id 子账号 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deviceCreatePostRequest($imei, $mark, $tags = null, $account_id = null)
    {
        // verify the required parameter 'imei' is set
        if ($imei === null || (is_array($imei) && count($imei) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imei when calling deviceCreatePost'
            );
        }
        // verify the required parameter 'mark' is set
        if ($mark === null || (is_array($mark) && count($mark) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mark when calling deviceCreatePost'
            );
        }

        $resourcePath = '/device/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($imei !== null) {
            $formParams['imei'] = ObjectSerializer::toFormValue($imei);
        }
        // form params
        if ($mark !== null) {
            $formParams['mark'] = ObjectSerializer::toFormValue($mark);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($account_id !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($account_id);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation devicesGet
     *
     * 设备列表
     *
     * @param  string $keyword 设备imei或备注模糊查询 (required)
     * @param  string $tags 标签名称,支持同时查询多个，用英文逗号隔开 (optional)
     * @param  string $mark 设备备注 (optional)
     * @param  string $imei 设备imei,支持同事查询多个，用英文逗号隔开 (optional)
     * @param  string $account_id 子账户id (optional)
     * @param  string $include_child 是否包含子账户，默认是false，返回true时包含子账户的设备 (optional)
     * @param  string $page page (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2001|object
     */
    public function devicesGet($keyword, $tags = null, $mark = null, $imei = null, $account_id = null, $include_child = null, $page = null, $page_size = null)
    {
        list($response) = $this->devicesGetWithHttpInfo($keyword, $tags, $mark, $imei, $account_id, $include_child, $page, $page_size);
        return $response;
    }

    /**
     * Operation devicesGetWithHttpInfo
     *
     * 设备列表
     *
     * @param  string $keyword 设备imei或备注模糊查询 (required)
     * @param  string $tags 标签名称,支持同时查询多个，用英文逗号隔开 (optional)
     * @param  string $mark 设备备注 (optional)
     * @param  string $imei 设备imei,支持同事查询多个，用英文逗号隔开 (optional)
     * @param  string $account_id 子账户id (optional)
     * @param  string $include_child 是否包含子账户，默认是false，返回true时包含子账户的设备 (optional)
     * @param  string $page (optional)
     * @param  int $page_size (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2001|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function devicesGetWithHttpInfo($keyword, $tags = null, $mark = null, $imei = null, $account_id = null, $include_child = null, $page = null, $page_size = null)
    {
        $request = $this->devicesGetRequest($keyword, $tags, $mark, $imei, $account_id, $include_child, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2001';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation devicesGetAsync
     *
     * 设备列表
     *
     * @param  string $keyword 设备imei或备注模糊查询 (required)
     * @param  string $tags 标签名称,支持同时查询多个，用英文逗号隔开 (optional)
     * @param  string $mark 设备备注 (optional)
     * @param  string $imei 设备imei,支持同事查询多个，用英文逗号隔开 (optional)
     * @param  string $account_id 子账户id (optional)
     * @param  string $include_child 是否包含子账户，默认是false，返回true时包含子账户的设备 (optional)
     * @param  string $page (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesGetAsync($keyword, $tags = null, $mark = null, $imei = null, $account_id = null, $include_child = null, $page = null, $page_size = null)
    {
        return $this->devicesGetAsyncWithHttpInfo($keyword, $tags, $mark, $imei, $account_id, $include_child, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation devicesGetAsyncWithHttpInfo
     *
     * 设备列表
     *
     * @param  string $keyword 设备imei或备注模糊查询 (required)
     * @param  string $tags 标签名称,支持同时查询多个，用英文逗号隔开 (optional)
     * @param  string $mark 设备备注 (optional)
     * @param  string $imei 设备imei,支持同事查询多个，用英文逗号隔开 (optional)
     * @param  string $account_id 子账户id (optional)
     * @param  string $include_child 是否包含子账户，默认是false，返回true时包含子账户的设备 (optional)
     * @param  string $page (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesGetAsyncWithHttpInfo($keyword, $tags = null, $mark = null, $imei = null, $account_id = null, $include_child = null, $page = null, $page_size = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2001';
        $request = $this->devicesGetRequest($keyword, $tags, $mark, $imei, $account_id, $include_child, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'devicesGet'
     *
     * @param  string $keyword 设备imei或备注模糊查询 (required)
     * @param  string $tags 标签名称,支持同时查询多个，用英文逗号隔开 (optional)
     * @param  string $mark 设备备注 (optional)
     * @param  string $imei 设备imei,支持同事查询多个，用英文逗号隔开 (optional)
     * @param  string $account_id 子账户id (optional)
     * @param  string $include_child 是否包含子账户，默认是false，返回true时包含子账户的设备 (optional)
     * @param  string $page (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function devicesGetRequest($keyword, $tags = null, $mark = null, $imei = null, $account_id = null, $include_child = null, $page = null, $page_size = null)
    {
        // verify the required parameter 'keyword' is set
        if ($keyword === null || (is_array($keyword) && count($keyword) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keyword when calling devicesGet'
            );
        }

        $resourcePath = '/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($mark !== null) {
            if('form' === 'form' && is_array($mark)) {
                foreach($mark as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['mark'] = $mark;
            }
        }
        // query params
        if ($imei !== null) {
            if('form' === 'form' && is_array($imei)) {
                foreach($imei as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['imei'] = $imei;
            }
        }
        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($include_child !== null) {
            if('form' === 'form' && is_array($include_child)) {
                foreach($include_child as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_child'] = $include_child;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }
        // query params
        if ($keyword !== null) {
            if('form' === 'form' && is_array($keyword)) {
                foreach($keyword as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyword'] = $keyword;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationGet
     *
     * 获得最新定位
     *
     * @param  string $share_id share_id (required)
     * @param  string $imei 为空时，返回所有，支持查询多个imei,用逗号隔开 (optional)
     * @param  string $mark 车辆备注，例如车牌号 (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     * @param  string $tags 根据标签查询，多个标签用,隔开 (optional)
     * @param  string $map_type 地图类型，支持三种类型，默认是地球坐标， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  string $parking_id 车库ID (optional)
     * @param  string $account_id 子账户ID (optional)
     * @param  string $include_child 非必填，是否包含子账户设备定位，默认是false (optional)
     * @param  int $is_show 非必填 1代表过滤坐标为0的数据 0代表不过滤 (optional)
     * @param  int $drive_status 行驶状态: 1行驶中 2停车 3离线 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse200
     */
    public function locationGet($share_id, $imei = null, $mark = null, $keyword = null, $tags = null, $map_type = null, $parking_id = null, $account_id = null, $include_child = null, $is_show = null, $drive_status = null)
    {
        list($response) = $this->locationGetWithHttpInfo($share_id, $imei, $mark, $keyword, $tags, $map_type, $parking_id, $account_id, $include_child, $is_show, $drive_status);
        return $response;
    }

    /**
     * Operation locationGetWithHttpInfo
     *
     * 获得最新定位
     *
     * @param  string $share_id (required)
     * @param  string $imei 为空时，返回所有，支持查询多个imei,用逗号隔开 (optional)
     * @param  string $mark 车辆备注，例如车牌号 (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     * @param  string $tags 根据标签查询，多个标签用,隔开 (optional)
     * @param  string $map_type 地图类型，支持三种类型，默认是地球坐标， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  string $parking_id 车库ID (optional)
     * @param  string $account_id 子账户ID (optional)
     * @param  string $include_child 非必填，是否包含子账户设备定位，默认是false (optional)
     * @param  int $is_show 非必填 1代表过滤坐标为0的数据 0代表不过滤 (optional)
     * @param  int $drive_status 行驶状态: 1行驶中 2停车 3离线 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationGetWithHttpInfo($share_id, $imei = null, $mark = null, $keyword = null, $tags = null, $map_type = null, $parking_id = null, $account_id = null, $include_child = null, $is_show = null, $drive_status = null)
    {
        $request = $this->locationGetRequest($share_id, $imei, $mark, $keyword, $tags, $map_type, $parking_id, $account_id, $include_child, $is_show, $drive_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation locationGetAsync
     *
     * 获得最新定位
     *
     * @param  string $share_id (required)
     * @param  string $imei 为空时，返回所有，支持查询多个imei,用逗号隔开 (optional)
     * @param  string $mark 车辆备注，例如车牌号 (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     * @param  string $tags 根据标签查询，多个标签用,隔开 (optional)
     * @param  string $map_type 地图类型，支持三种类型，默认是地球坐标， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  string $parking_id 车库ID (optional)
     * @param  string $account_id 子账户ID (optional)
     * @param  string $include_child 非必填，是否包含子账户设备定位，默认是false (optional)
     * @param  int $is_show 非必填 1代表过滤坐标为0的数据 0代表不过滤 (optional)
     * @param  int $drive_status 行驶状态: 1行驶中 2停车 3离线 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationGetAsync($share_id, $imei = null, $mark = null, $keyword = null, $tags = null, $map_type = null, $parking_id = null, $account_id = null, $include_child = null, $is_show = null, $drive_status = null)
    {
        return $this->locationGetAsyncWithHttpInfo($share_id, $imei, $mark, $keyword, $tags, $map_type, $parking_id, $account_id, $include_child, $is_show, $drive_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationGetAsyncWithHttpInfo
     *
     * 获得最新定位
     *
     * @param  string $share_id (required)
     * @param  string $imei 为空时，返回所有，支持查询多个imei,用逗号隔开 (optional)
     * @param  string $mark 车辆备注，例如车牌号 (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     * @param  string $tags 根据标签查询，多个标签用,隔开 (optional)
     * @param  string $map_type 地图类型，支持三种类型，默认是地球坐标， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  string $parking_id 车库ID (optional)
     * @param  string $account_id 子账户ID (optional)
     * @param  string $include_child 非必填，是否包含子账户设备定位，默认是false (optional)
     * @param  int $is_show 非必填 1代表过滤坐标为0的数据 0代表不过滤 (optional)
     * @param  int $drive_status 行驶状态: 1行驶中 2停车 3离线 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationGetAsyncWithHttpInfo($share_id, $imei = null, $mark = null, $keyword = null, $tags = null, $map_type = null, $parking_id = null, $account_id = null, $include_child = null, $is_show = null, $drive_status = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse200';
        $request = $this->locationGetRequest($share_id, $imei, $mark, $keyword, $tags, $map_type, $parking_id, $account_id, $include_child, $is_show, $drive_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationGet'
     *
     * @param  string $share_id (required)
     * @param  string $imei 为空时，返回所有，支持查询多个imei,用逗号隔开 (optional)
     * @param  string $mark 车辆备注，例如车牌号 (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     * @param  string $tags 根据标签查询，多个标签用,隔开 (optional)
     * @param  string $map_type 地图类型，支持三种类型，默认是地球坐标， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  string $parking_id 车库ID (optional)
     * @param  string $account_id 子账户ID (optional)
     * @param  string $include_child 非必填，是否包含子账户设备定位，默认是false (optional)
     * @param  int $is_show 非必填 1代表过滤坐标为0的数据 0代表不过滤 (optional)
     * @param  int $drive_status 行驶状态: 1行驶中 2停车 3离线 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function locationGetRequest($share_id, $imei = null, $mark = null, $keyword = null, $tags = null, $map_type = null, $parking_id = null, $account_id = null, $include_child = null, $is_show = null, $drive_status = null)
    {
        // verify the required parameter 'share_id' is set
        if ($share_id === null || (is_array($share_id) && count($share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $share_id when calling locationGet'
            );
        }

        $resourcePath = '/location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($imei !== null) {
            if('form' === 'form' && is_array($imei)) {
                foreach($imei as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['imei'] = $imei;
            }
        }
        // query params
        if ($mark !== null) {
            if('form' === 'form' && is_array($mark)) {
                foreach($mark as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['mark'] = $mark;
            }
        }
        // query params
        if ($keyword !== null) {
            if('form' === 'form' && is_array($keyword)) {
                foreach($keyword as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyword'] = $keyword;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($map_type !== null) {
            if('form' === 'form' && is_array($map_type)) {
                foreach($map_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['map_type'] = $map_type;
            }
        }
        // query params
        if ($parking_id !== null) {
            if('form' === 'form' && is_array($parking_id)) {
                foreach($parking_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parking_id'] = $parking_id;
            }
        }
        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($include_child !== null) {
            if('form' === 'form' && is_array($include_child)) {
                foreach($include_child as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_child'] = $include_child;
            }
        }
        // query params
        if ($is_show !== null) {
            if('form' === 'form' && is_array($is_show)) {
                foreach($is_show as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_show'] = $is_show;
            }
        }
        // query params
        if ($drive_status !== null) {
            if('form' === 'form' && is_array($drive_status)) {
                foreach($drive_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['drive_status'] = $drive_status;
            }
        }
        // query params
        if ($share_id !== null) {
            if('form' === 'form' && is_array($share_id)) {
                foreach($share_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['share_id'] = $share_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationStatusGet
     *
     * 设备定位状态统计
     *
     * @param  string $parking_id 选填，车库ID (optional)
     * @param  string $tags 设备标签，支持多标签查询，用英文逗号隔开 (optional)
     * @param  string $account_id 选填，子账户ID (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2003
     */
    public function locationStatusGet($parking_id = null, $tags = null, $account_id = null, $keyword = null)
    {
        list($response) = $this->locationStatusGetWithHttpInfo($parking_id, $tags, $account_id, $keyword);
        return $response;
    }

    /**
     * Operation locationStatusGetWithHttpInfo
     *
     * 设备定位状态统计
     *
     * @param  string $parking_id 选填，车库ID (optional)
     * @param  string $tags 设备标签，支持多标签查询，用英文逗号隔开 (optional)
     * @param  string $account_id 选填，子账户ID (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationStatusGetWithHttpInfo($parking_id = null, $tags = null, $account_id = null, $keyword = null)
    {
        $request = $this->locationStatusGetRequest($parking_id, $tags, $account_id, $keyword);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation locationStatusGetAsync
     *
     * 设备定位状态统计
     *
     * @param  string $parking_id 选填，车库ID (optional)
     * @param  string $tags 设备标签，支持多标签查询，用英文逗号隔开 (optional)
     * @param  string $account_id 选填，子账户ID (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationStatusGetAsync($parking_id = null, $tags = null, $account_id = null, $keyword = null)
    {
        return $this->locationStatusGetAsyncWithHttpInfo($parking_id, $tags, $account_id, $keyword)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationStatusGetAsyncWithHttpInfo
     *
     * 设备定位状态统计
     *
     * @param  string $parking_id 选填，车库ID (optional)
     * @param  string $tags 设备标签，支持多标签查询，用英文逗号隔开 (optional)
     * @param  string $account_id 选填，子账户ID (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationStatusGetAsyncWithHttpInfo($parking_id = null, $tags = null, $account_id = null, $keyword = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2003';
        $request = $this->locationStatusGetRequest($parking_id, $tags, $account_id, $keyword);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationStatusGet'
     *
     * @param  string $parking_id 选填，车库ID (optional)
     * @param  string $tags 设备标签，支持多标签查询，用英文逗号隔开 (optional)
     * @param  string $account_id 选填，子账户ID (optional)
     * @param  string $keyword 模糊搜索，只针对imei和mark (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function locationStatusGetRequest($parking_id = null, $tags = null, $account_id = null, $keyword = null)
    {

        $resourcePath = '/location/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parking_id !== null) {
            if('form' === 'form' && is_array($parking_id)) {
                foreach($parking_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parking_id'] = $parking_id;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($keyword !== null) {
            if('form' === 'form' && is_array($keyword)) {
                foreach($keyword as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyword'] = $keyword;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation locationUpdatePost
     *
     * 更新设备定位
     *
     * @param  string $imei 设备号 (required)
     * @param  float $latitude 经度 (required)
     * @param  float $longitude 纬度 (required)
     * @param  float $speed 速度，单位是km/h (required)
     * @param  string $type 类型 gps|wifi|location，默认是gps (required)
     * @param  int $gps_time 时间戳 (required)
     * @param  float $course 航向，默认是0 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function locationUpdatePost($imei, $latitude, $longitude, $speed, $type, $gps_time, $course = null)
    {
        list($response) = $this->locationUpdatePostWithHttpInfo($imei, $latitude, $longitude, $speed, $type, $gps_time, $course);
        return $response;
    }

    /**
     * Operation locationUpdatePostWithHttpInfo
     *
     * 更新设备定位
     *
     * @param  string $imei 设备号 (required)
     * @param  float $latitude 经度 (required)
     * @param  float $longitude 纬度 (required)
     * @param  float $speed 速度，单位是km/h (required)
     * @param  string $type 类型 gps|wifi|location，默认是gps (required)
     * @param  int $gps_time 时间戳 (required)
     * @param  float $course 航向，默认是0 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function locationUpdatePostWithHttpInfo($imei, $latitude, $longitude, $speed, $type, $gps_time, $course = null)
    {
        $request = $this->locationUpdatePostRequest($imei, $latitude, $longitude, $speed, $type, $gps_time, $course);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation locationUpdatePostAsync
     *
     * 更新设备定位
     *
     * @param  string $imei 设备号 (required)
     * @param  float $latitude 经度 (required)
     * @param  float $longitude 纬度 (required)
     * @param  float $speed 速度，单位是km/h (required)
     * @param  string $type 类型 gps|wifi|location，默认是gps (required)
     * @param  int $gps_time 时间戳 (required)
     * @param  float $course 航向，默认是0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationUpdatePostAsync($imei, $latitude, $longitude, $speed, $type, $gps_time, $course = null)
    {
        return $this->locationUpdatePostAsyncWithHttpInfo($imei, $latitude, $longitude, $speed, $type, $gps_time, $course)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation locationUpdatePostAsyncWithHttpInfo
     *
     * 更新设备定位
     *
     * @param  string $imei 设备号 (required)
     * @param  float $latitude 经度 (required)
     * @param  float $longitude 纬度 (required)
     * @param  float $speed 速度，单位是km/h (required)
     * @param  string $type 类型 gps|wifi|location，默认是gps (required)
     * @param  int $gps_time 时间戳 (required)
     * @param  float $course 航向，默认是0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function locationUpdatePostAsyncWithHttpInfo($imei, $latitude, $longitude, $speed, $type, $gps_time, $course = null)
    {
        $returnType = 'object';
        $request = $this->locationUpdatePostRequest($imei, $latitude, $longitude, $speed, $type, $gps_time, $course);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'locationUpdatePost'
     *
     * @param  string $imei 设备号 (required)
     * @param  float $latitude 经度 (required)
     * @param  float $longitude 纬度 (required)
     * @param  float $speed 速度，单位是km/h (required)
     * @param  string $type 类型 gps|wifi|location，默认是gps (required)
     * @param  int $gps_time 时间戳 (required)
     * @param  float $course 航向，默认是0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function locationUpdatePostRequest($imei, $latitude, $longitude, $speed, $type, $gps_time, $course = null)
    {
        // verify the required parameter 'imei' is set
        if ($imei === null || (is_array($imei) && count($imei) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imei when calling locationUpdatePost'
            );
        }
        // verify the required parameter 'latitude' is set
        if ($latitude === null || (is_array($latitude) && count($latitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $latitude when calling locationUpdatePost'
            );
        }
        // verify the required parameter 'longitude' is set
        if ($longitude === null || (is_array($longitude) && count($longitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $longitude when calling locationUpdatePost'
            );
        }
        // verify the required parameter 'speed' is set
        if ($speed === null || (is_array($speed) && count($speed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $speed when calling locationUpdatePost'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling locationUpdatePost'
            );
        }
        // verify the required parameter 'gps_time' is set
        if ($gps_time === null || (is_array($gps_time) && count($gps_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gps_time when calling locationUpdatePost'
            );
        }

        $resourcePath = '/location/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($imei !== null) {
            $formParams['imei'] = ObjectSerializer::toFormValue($imei);
        }
        // form params
        if ($latitude !== null) {
            $formParams['latitude'] = ObjectSerializer::toFormValue($latitude);
        }
        // form params
        if ($longitude !== null) {
            $formParams['longitude'] = ObjectSerializer::toFormValue($longitude);
        }
        // form params
        if ($speed !== null) {
            $formParams['speed'] = ObjectSerializer::toFormValue($speed);
        }
        // form params
        if ($course !== null) {
            $formParams['course'] = ObjectSerializer::toFormValue($course);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($gps_time !== null) {
            $formParams['gps_time'] = ObjectSerializer::toFormValue($gps_time);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportByDeviceGet
     *
     * 根据设备获得里程统计
     *
     * @param  string $type 日期类型，month和year和hour和last30days (required)
     * @param  string $value 202101代表2021年1月，或2021,或20230609 (required)
     * @param  string $share_id share_id (required)
     * @param  string $is_export 是否导出 (required)
     * @param  string $imei 设备号 (optional)
     * @param  string $tags 设备标签 (optional)
     * @param  string $order_by 排序字段 distance | time | date，默认是distance，time是驾驶时长，date是日期 (optional)
     * @param  string $order_type 排序方式 desc | asc ， 默认是desc 倒序 (optional)
     * @param  string $m m (optional)
     * @param  string $n n (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2008
     */
    public function reportByDeviceGet($type, $value, $share_id, $is_export, $imei = null, $tags = null, $order_by = null, $order_type = null, $m = null, $n = null)
    {
        list($response) = $this->reportByDeviceGetWithHttpInfo($type, $value, $share_id, $is_export, $imei, $tags, $order_by, $order_type, $m, $n);
        return $response;
    }

    /**
     * Operation reportByDeviceGetWithHttpInfo
     *
     * 根据设备获得里程统计
     *
     * @param  string $type 日期类型，month和year和hour和last30days (required)
     * @param  string $value 202101代表2021年1月，或2021,或20230609 (required)
     * @param  string $share_id (required)
     * @param  string $is_export 是否导出 (required)
     * @param  string $imei 设备号 (optional)
     * @param  string $tags 设备标签 (optional)
     * @param  string $order_by 排序字段 distance | time | date，默认是distance，time是驾驶时长，date是日期 (optional)
     * @param  string $order_type 排序方式 desc | asc ， 默认是desc 倒序 (optional)
     * @param  string $m (optional)
     * @param  string $n (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportByDeviceGetWithHttpInfo($type, $value, $share_id, $is_export, $imei = null, $tags = null, $order_by = null, $order_type = null, $m = null, $n = null)
    {
        $request = $this->reportByDeviceGetRequest($type, $value, $share_id, $is_export, $imei, $tags, $order_by, $order_type, $m, $n);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2008' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2008', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2008';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportByDeviceGetAsync
     *
     * 根据设备获得里程统计
     *
     * @param  string $type 日期类型，month和year和hour和last30days (required)
     * @param  string $value 202101代表2021年1月，或2021,或20230609 (required)
     * @param  string $share_id (required)
     * @param  string $is_export 是否导出 (required)
     * @param  string $imei 设备号 (optional)
     * @param  string $tags 设备标签 (optional)
     * @param  string $order_by 排序字段 distance | time | date，默认是distance，time是驾驶时长，date是日期 (optional)
     * @param  string $order_type 排序方式 desc | asc ， 默认是desc 倒序 (optional)
     * @param  string $m (optional)
     * @param  string $n (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportByDeviceGetAsync($type, $value, $share_id, $is_export, $imei = null, $tags = null, $order_by = null, $order_type = null, $m = null, $n = null)
    {
        return $this->reportByDeviceGetAsyncWithHttpInfo($type, $value, $share_id, $is_export, $imei, $tags, $order_by, $order_type, $m, $n)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportByDeviceGetAsyncWithHttpInfo
     *
     * 根据设备获得里程统计
     *
     * @param  string $type 日期类型，month和year和hour和last30days (required)
     * @param  string $value 202101代表2021年1月，或2021,或20230609 (required)
     * @param  string $share_id (required)
     * @param  string $is_export 是否导出 (required)
     * @param  string $imei 设备号 (optional)
     * @param  string $tags 设备标签 (optional)
     * @param  string $order_by 排序字段 distance | time | date，默认是distance，time是驾驶时长，date是日期 (optional)
     * @param  string $order_type 排序方式 desc | asc ， 默认是desc 倒序 (optional)
     * @param  string $m (optional)
     * @param  string $n (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportByDeviceGetAsyncWithHttpInfo($type, $value, $share_id, $is_export, $imei = null, $tags = null, $order_by = null, $order_type = null, $m = null, $n = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2008';
        $request = $this->reportByDeviceGetRequest($type, $value, $share_id, $is_export, $imei, $tags, $order_by, $order_type, $m, $n);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportByDeviceGet'
     *
     * @param  string $type 日期类型，month和year和hour和last30days (required)
     * @param  string $value 202101代表2021年1月，或2021,或20230609 (required)
     * @param  string $share_id (required)
     * @param  string $is_export 是否导出 (required)
     * @param  string $imei 设备号 (optional)
     * @param  string $tags 设备标签 (optional)
     * @param  string $order_by 排序字段 distance | time | date，默认是distance，time是驾驶时长，date是日期 (optional)
     * @param  string $order_type 排序方式 desc | asc ， 默认是desc 倒序 (optional)
     * @param  string $m (optional)
     * @param  string $n (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reportByDeviceGetRequest($type, $value, $share_id, $is_export, $imei = null, $tags = null, $order_by = null, $order_type = null, $m = null, $n = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling reportByDeviceGet'
            );
        }
        // verify the required parameter 'value' is set
        if ($value === null || (is_array($value) && count($value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $value when calling reportByDeviceGet'
            );
        }
        // verify the required parameter 'share_id' is set
        if ($share_id === null || (is_array($share_id) && count($share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $share_id when calling reportByDeviceGet'
            );
        }
        // verify the required parameter 'is_export' is set
        if ($is_export === null || (is_array($is_export) && count($is_export) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_export when calling reportByDeviceGet'
            );
        }

        $resourcePath = '/report/by_device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($value !== null) {
            if('form' === 'form' && is_array($value)) {
                foreach($value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['value'] = $value;
            }
        }
        // query params
        if ($imei !== null) {
            if('form' === 'form' && is_array($imei)) {
                foreach($imei as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['imei'] = $imei;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_by'] = $order_by;
            }
        }
        // query params
        if ($order_type !== null) {
            if('form' === 'form' && is_array($order_type)) {
                foreach($order_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order_type'] = $order_type;
            }
        }
        // query params
        if ($m !== null) {
            if('form' === 'form' && is_array($m)) {
                foreach($m as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['m'] = $m;
            }
        }
        // query params
        if ($n !== null) {
            if('form' === 'form' && is_array($n)) {
                foreach($n as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['n'] = $n;
            }
        }
        // query params
        if ($share_id !== null) {
            if('form' === 'form' && is_array($share_id)) {
                foreach($share_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['share_id'] = $share_id;
            }
        }
        // query params
        if ($is_export !== null) {
            if('form' === 'form' && is_array($is_export)) {
                foreach($is_export as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_export'] = $is_export;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shareInfoGet
     *
     * 获取分享链接信息
     *
     * @param  string $share_id share_id (required)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function shareInfoGet($share_id)
    {
        list($response) = $this->shareInfoGetWithHttpInfo($share_id);
        return $response;
    }

    /**
     * Operation shareInfoGetWithHttpInfo
     *
     * 获取分享链接信息
     *
     * @param  string $share_id (required)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function shareInfoGetWithHttpInfo($share_id)
    {
        $request = $this->shareInfoGetRequest($share_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shareInfoGetAsync
     *
     * 获取分享链接信息
     *
     * @param  string $share_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareInfoGetAsync($share_id)
    {
        return $this->shareInfoGetAsyncWithHttpInfo($share_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shareInfoGetAsyncWithHttpInfo
     *
     * 获取分享链接信息
     *
     * @param  string $share_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareInfoGetAsyncWithHttpInfo($share_id)
    {
        $returnType = 'object';
        $request = $this->shareInfoGetRequest($share_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shareInfoGet'
     *
     * @param  string $share_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shareInfoGetRequest($share_id)
    {
        // verify the required parameter 'share_id' is set
        if ($share_id === null || (is_array($share_id) && count($share_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $share_id when calling shareInfoGet'
            );
        }

        $resourcePath = '/share/info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($share_id !== null) {
            if('form' === 'form' && is_array($share_id)) {
                foreach($share_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['share_id'] = $share_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shareLinkPost
     *
     * 生成分享链接
     *
     * @param  string $imei 设备号 (required)
     * @param  string $url 分享链接 (required)
     * @param  int $expire_type 有效期类型 1:1小时 2:1天 3:7天(默认) 4:永久 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function shareLinkPost($imei, $url, $expire_type = null)
    {
        list($response) = $this->shareLinkPostWithHttpInfo($imei, $url, $expire_type);
        return $response;
    }

    /**
     * Operation shareLinkPostWithHttpInfo
     *
     * 生成分享链接
     *
     * @param  string $imei 设备号 (required)
     * @param  string $url 分享链接 (required)
     * @param  int $expire_type 有效期类型 1:1小时 2:1天 3:7天(默认) 4:永久 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function shareLinkPostWithHttpInfo($imei, $url, $expire_type = null)
    {
        $request = $this->shareLinkPostRequest($imei, $url, $expire_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shareLinkPostAsync
     *
     * 生成分享链接
     *
     * @param  string $imei 设备号 (required)
     * @param  string $url 分享链接 (required)
     * @param  int $expire_type 有效期类型 1:1小时 2:1天 3:7天(默认) 4:永久 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareLinkPostAsync($imei, $url, $expire_type = null)
    {
        return $this->shareLinkPostAsyncWithHttpInfo($imei, $url, $expire_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shareLinkPostAsyncWithHttpInfo
     *
     * 生成分享链接
     *
     * @param  string $imei 设备号 (required)
     * @param  string $url 分享链接 (required)
     * @param  int $expire_type 有效期类型 1:1小时 2:1天 3:7天(默认) 4:永久 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareLinkPostAsyncWithHttpInfo($imei, $url, $expire_type = null)
    {
        $returnType = 'object';
        $request = $this->shareLinkPostRequest($imei, $url, $expire_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shareLinkPost'
     *
     * @param  string $imei 设备号 (required)
     * @param  string $url 分享链接 (required)
     * @param  int $expire_type 有效期类型 1:1小时 2:1天 3:7天(默认) 4:永久 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shareLinkPostRequest($imei, $url, $expire_type = null)
    {
        // verify the required parameter 'imei' is set
        if ($imei === null || (is_array($imei) && count($imei) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imei when calling shareLinkPost'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling shareLinkPost'
            );
        }

        $resourcePath = '/share/link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($imei !== null) {
            $formParams['imei'] = ObjectSerializer::toFormValue($imei);
        }
        // form params
        if ($expire_type !== null) {
            $formParams['expire_type'] = ObjectSerializer::toFormValue($expire_type);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trackAnalysisGet
     *
     * 获得轨迹分段分析
     *
     * @param  string $imei 设备号 (required)
     * @param  string $date 查询日期 (required)
     * @param  int $ignore_time 可忽略的行驶途中短暂停车时间，单位秒，默认180 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2007
     */
    public function trackAnalysisGet($imei, $date, $ignore_time = null)
    {
        list($response) = $this->trackAnalysisGetWithHttpInfo($imei, $date, $ignore_time);
        return $response;
    }

    /**
     * Operation trackAnalysisGetWithHttpInfo
     *
     * 获得轨迹分段分析
     *
     * @param  string $imei 设备号 (required)
     * @param  string $date 查询日期 (required)
     * @param  int $ignore_time 可忽略的行驶途中短暂停车时间，单位秒，默认180 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackAnalysisGetWithHttpInfo($imei, $date, $ignore_time = null)
    {
        $request = $this->trackAnalysisGetRequest($imei, $date, $ignore_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2007' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2007', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2007';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trackAnalysisGetAsync
     *
     * 获得轨迹分段分析
     *
     * @param  string $imei 设备号 (required)
     * @param  string $date 查询日期 (required)
     * @param  int $ignore_time 可忽略的行驶途中短暂停车时间，单位秒，默认180 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackAnalysisGetAsync($imei, $date, $ignore_time = null)
    {
        return $this->trackAnalysisGetAsyncWithHttpInfo($imei, $date, $ignore_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackAnalysisGetAsyncWithHttpInfo
     *
     * 获得轨迹分段分析
     *
     * @param  string $imei 设备号 (required)
     * @param  string $date 查询日期 (required)
     * @param  int $ignore_time 可忽略的行驶途中短暂停车时间，单位秒，默认180 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackAnalysisGetAsyncWithHttpInfo($imei, $date, $ignore_time = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2007';
        $request = $this->trackAnalysisGetRequest($imei, $date, $ignore_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackAnalysisGet'
     *
     * @param  string $imei 设备号 (required)
     * @param  string $date 查询日期 (required)
     * @param  int $ignore_time 可忽略的行驶途中短暂停车时间，单位秒，默认180 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trackAnalysisGetRequest($imei, $date, $ignore_time = null)
    {
        // verify the required parameter 'imei' is set
        if ($imei === null || (is_array($imei) && count($imei) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imei when calling trackAnalysisGet'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling trackAnalysisGet'
            );
        }

        $resourcePath = '/track/analysis';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($imei !== null) {
            if('form' === 'form' && is_array($imei)) {
                foreach($imei as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['imei'] = $imei;
            }
        }
        // query params
        if ($date !== null) {
            if('form' === 'form' && is_array($date)) {
                foreach($date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date'] = $date;
            }
        }
        // query params
        if ($ignore_time !== null) {
            if('form' === 'form' && is_array($ignore_time)) {
                foreach($ignore_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ignore_time'] = $ignore_time;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trackHistoryGet
     *
     * 查询设备历史轨迹
     *
     * @param  string $imei 设备号 (required)
     * @param  int $start_time 开始时间戳 (required)
     * @param  int $end_time 结束时间戳 (required)
     * @param  string $order 排序 asc | desc，默认是按gps_time 顺序排列 (optional)
     * @param  string $map_type 地图类型，支持三种类型不区分大小写，默认是bd09， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  int $is_show 是否过滤坐标为0的数据 1过滤 0不过滤 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Wherewhere\Model\InlineResponse2006
     */
    public function trackHistoryGet($imei, $start_time, $end_time, $order = null, $map_type = null, $is_show = null)
    {
        list($response) = $this->trackHistoryGetWithHttpInfo($imei, $start_time, $end_time, $order, $map_type, $is_show);
        return $response;
    }

    /**
     * Operation trackHistoryGetWithHttpInfo
     *
     * 查询设备历史轨迹
     *
     * @param  string $imei 设备号 (required)
     * @param  int $start_time 开始时间戳 (required)
     * @param  int $end_time 结束时间戳 (required)
     * @param  string $order 排序 asc | desc，默认是按gps_time 顺序排列 (optional)
     * @param  string $map_type 地图类型，支持三种类型不区分大小写，默认是bd09， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  int $is_show 是否过滤坐标为0的数据 1过滤 0不过滤 (optional)
     *
     * @throws \Wherewhere\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Wherewhere\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackHistoryGetWithHttpInfo($imei, $start_time, $end_time, $order = null, $map_type = null, $is_show = null)
    {
        $request = $this->trackHistoryGetRequest($imei, $start_time, $end_time, $order, $map_type, $is_show);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Wherewhere\Model\InlineResponse2006' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Wherewhere\Model\InlineResponse2006', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Wherewhere\Model\InlineResponse2006';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Wherewhere\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trackHistoryGetAsync
     *
     * 查询设备历史轨迹
     *
     * @param  string $imei 设备号 (required)
     * @param  int $start_time 开始时间戳 (required)
     * @param  int $end_time 结束时间戳 (required)
     * @param  string $order 排序 asc | desc，默认是按gps_time 顺序排列 (optional)
     * @param  string $map_type 地图类型，支持三种类型不区分大小写，默认是bd09， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  int $is_show 是否过滤坐标为0的数据 1过滤 0不过滤 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackHistoryGetAsync($imei, $start_time, $end_time, $order = null, $map_type = null, $is_show = null)
    {
        return $this->trackHistoryGetAsyncWithHttpInfo($imei, $start_time, $end_time, $order, $map_type, $is_show)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackHistoryGetAsyncWithHttpInfo
     *
     * 查询设备历史轨迹
     *
     * @param  string $imei 设备号 (required)
     * @param  int $start_time 开始时间戳 (required)
     * @param  int $end_time 结束时间戳 (required)
     * @param  string $order 排序 asc | desc，默认是按gps_time 顺序排列 (optional)
     * @param  string $map_type 地图类型，支持三种类型不区分大小写，默认是bd09， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  int $is_show 是否过滤坐标为0的数据 1过滤 0不过滤 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackHistoryGetAsyncWithHttpInfo($imei, $start_time, $end_time, $order = null, $map_type = null, $is_show = null)
    {
        $returnType = '\Wherewhere\Model\InlineResponse2006';
        $request = $this->trackHistoryGetRequest($imei, $start_time, $end_time, $order, $map_type, $is_show);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackHistoryGet'
     *
     * @param  string $imei 设备号 (required)
     * @param  int $start_time 开始时间戳 (required)
     * @param  int $end_time 结束时间戳 (required)
     * @param  string $order 排序 asc | desc，默认是按gps_time 顺序排列 (optional)
     * @param  string $map_type 地图类型，支持三种类型不区分大小写，默认是bd09， 火星坐标 GCJ02 百度坐标BD09 地球坐标 WGS84 (optional)
     * @param  int $is_show 是否过滤坐标为0的数据 1过滤 0不过滤 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trackHistoryGetRequest($imei, $start_time, $end_time, $order = null, $map_type = null, $is_show = null)
    {
        // verify the required parameter 'imei' is set
        if ($imei === null || (is_array($imei) && count($imei) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imei when calling trackHistoryGet'
            );
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling trackHistoryGet'
            );
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null || (is_array($end_time) && count($end_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_time when calling trackHistoryGet'
            );
        }

        $resourcePath = '/track/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($imei !== null) {
            if('form' === 'form' && is_array($imei)) {
                foreach($imei as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['imei'] = $imei;
            }
        }
        // query params
        if ($start_time !== null) {
            if('form' === 'form' && is_array($start_time)) {
                foreach($start_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['start_time'] = $start_time;
            }
        }
        // query params
        if ($end_time !== null) {
            if('form' === 'form' && is_array($end_time)) {
                foreach($end_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['end_time'] = $end_time;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($map_type !== null) {
            if('form' === 'form' && is_array($map_type)) {
                foreach($map_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['map_type'] = $map_type;
            }
        }
        // query params
        if ($is_show !== null) {
            if('form' === 'form' && is_array($is_show)) {
                foreach($is_show as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['is_show'] = $is_show;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
