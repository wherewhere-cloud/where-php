<?php
/**
 * InlineResponse2003Data
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhereAPI
 *
 * WhereWhere.cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Wherewhere\Model;

use \ArrayAccess;
use \Wherewhere\ObjectSerializer;

/**
 * InlineResponse2003Data Class Doc Comment
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2003Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_3_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'driving_count' => 'int',
        'stop_count' => 'int',
        'lost_connect_count' => 'int',
        'total_count' => 'int',
        'current_page' => 'int',
        'total_page' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'driving_count' => null,
        'stop_count' => null,
        'lost_connect_count' => null,
        'total_count' => null,
        'current_page' => null,
        'total_page' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'driving_count' => 'driving_count',
        'stop_count' => 'stop_count',
        'lost_connect_count' => 'lost_connect_count',
        'total_count' => 'total_count',
        'current_page' => 'current_page',
        'total_page' => 'total_page'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'driving_count' => 'setDrivingCount',
        'stop_count' => 'setStopCount',
        'lost_connect_count' => 'setLostConnectCount',
        'total_count' => 'setTotalCount',
        'current_page' => 'setCurrentPage',
        'total_page' => 'setTotalPage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'driving_count' => 'getDrivingCount',
        'stop_count' => 'getStopCount',
        'lost_connect_count' => 'getLostConnectCount',
        'total_count' => 'getTotalCount',
        'current_page' => 'getCurrentPage',
        'total_page' => 'getTotalPage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['driving_count'] = $data['driving_count'] ?? null;
        $this->container['stop_count'] = $data['stop_count'] ?? null;
        $this->container['lost_connect_count'] = $data['lost_connect_count'] ?? null;
        $this->container['total_count'] = $data['total_count'] ?? null;
        $this->container['current_page'] = $data['current_page'] ?? null;
        $this->container['total_page'] = $data['total_page'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['driving_count'] === null) {
            $invalidProperties[] = "'driving_count' can't be null";
        }
        if ($this->container['stop_count'] === null) {
            $invalidProperties[] = "'stop_count' can't be null";
        }
        if ($this->container['lost_connect_count'] === null) {
            $invalidProperties[] = "'lost_connect_count' can't be null";
        }
        if ($this->container['total_count'] === null) {
            $invalidProperties[] = "'total_count' can't be null";
        }
        if ($this->container['current_page'] === null) {
            $invalidProperties[] = "'current_page' can't be null";
        }
        if ($this->container['total_page'] === null) {
            $invalidProperties[] = "'total_page' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets driving_count
     *
     * @return int
     */
    public function getDrivingCount()
    {
        return $this->container['driving_count'];
    }

    /**
     * Sets driving_count
     *
     * @param int $driving_count driving_count
     *
     * @return self
     */
    public function setDrivingCount($driving_count)
    {
        $this->container['driving_count'] = $driving_count;

        return $this;
    }

    /**
     * Gets stop_count
     *
     * @return int
     */
    public function getStopCount()
    {
        return $this->container['stop_count'];
    }

    /**
     * Sets stop_count
     *
     * @param int $stop_count stop_count
     *
     * @return self
     */
    public function setStopCount($stop_count)
    {
        $this->container['stop_count'] = $stop_count;

        return $this;
    }

    /**
     * Gets lost_connect_count
     *
     * @return int
     */
    public function getLostConnectCount()
    {
        return $this->container['lost_connect_count'];
    }

    /**
     * Sets lost_connect_count
     *
     * @param int $lost_connect_count lost_connect_count
     *
     * @return self
     */
    public function setLostConnectCount($lost_connect_count)
    {
        $this->container['lost_connect_count'] = $lost_connect_count;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int $total_count total_count
     *
     * @return self
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets current_page
     *
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int $current_page current_page
     *
     * @return self
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets total_page
     *
     * @return int
     */
    public function getTotalPage()
    {
        return $this->container['total_page'];
    }

    /**
     * Sets total_page
     *
     * @param int $total_page total_page
     *
     * @return self
     */
    public function setTotalPage($total_page)
    {
        $this->container['total_page'] = $total_page;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


