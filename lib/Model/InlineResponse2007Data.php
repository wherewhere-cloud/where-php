<?php
/**
 * InlineResponse2007Data
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WhereAPI
 *
 * WhereWhere.cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Wherewhere\Model;

use \ArrayAccess;
use \Wherewhere\ObjectSerializer;

/**
 * InlineResponse2007Data Class Doc Comment
 *
 * @category Class
 * @package  Wherewhere
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse2007Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_7_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_time' => 'string',
        'start_lng' => 'string',
        'start_lat' => 'string',
        'end_time' => 'string',
        'end_lng' => 'string',
        'end_lat' => 'string',
        'total_distance' => 'int',
        'total_time' => 'int',
        'action_type' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_time' => null,
        'start_lng' => null,
        'start_lat' => null,
        'end_time' => null,
        'end_lng' => null,
        'end_lat' => null,
        'total_distance' => null,
        'total_time' => null,
        'action_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_time' => 'start_time',
        'start_lng' => 'start_lng',
        'start_lat' => 'start_lat',
        'end_time' => 'end_time',
        'end_lng' => 'end_lng',
        'end_lat' => 'end_lat',
        'total_distance' => 'total_distance',
        'total_time' => 'total_time',
        'action_type' => 'action_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_time' => 'setStartTime',
        'start_lng' => 'setStartLng',
        'start_lat' => 'setStartLat',
        'end_time' => 'setEndTime',
        'end_lng' => 'setEndLng',
        'end_lat' => 'setEndLat',
        'total_distance' => 'setTotalDistance',
        'total_time' => 'setTotalTime',
        'action_type' => 'setActionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_time' => 'getStartTime',
        'start_lng' => 'getStartLng',
        'start_lat' => 'getStartLat',
        'end_time' => 'getEndTime',
        'end_lng' => 'getEndLng',
        'end_lat' => 'getEndLat',
        'total_distance' => 'getTotalDistance',
        'total_time' => 'getTotalTime',
        'action_type' => 'getActionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['start_lng'] = $data['start_lng'] ?? null;
        $this->container['start_lat'] = $data['start_lat'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['end_lng'] = $data['end_lng'] ?? null;
        $this->container['end_lat'] = $data['end_lat'] ?? null;
        $this->container['total_distance'] = $data['total_distance'] ?? null;
        $this->container['total_time'] = $data['total_time'] ?? null;
        $this->container['action_type'] = $data['action_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['start_lng'] === null) {
            $invalidProperties[] = "'start_lng' can't be null";
        }
        if ($this->container['start_lat'] === null) {
            $invalidProperties[] = "'start_lat' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['end_lng'] === null) {
            $invalidProperties[] = "'end_lng' can't be null";
        }
        if ($this->container['end_lat'] === null) {
            $invalidProperties[] = "'end_lat' can't be null";
        }
        if ($this->container['total_distance'] === null) {
            $invalidProperties[] = "'total_distance' can't be null";
        }
        if ($this->container['total_time'] === null) {
            $invalidProperties[] = "'total_time' can't be null";
        }
        if ($this->container['action_type'] === null) {
            $invalidProperties[] = "'action_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time 起始坐标点时间
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets start_lng
     *
     * @return string
     */
    public function getStartLng()
    {
        return $this->container['start_lng'];
    }

    /**
     * Sets start_lng
     *
     * @param string $start_lng 起始坐标点经度
     *
     * @return self
     */
    public function setStartLng($start_lng)
    {
        $this->container['start_lng'] = $start_lng;

        return $this;
    }

    /**
     * Gets start_lat
     *
     * @return string
     */
    public function getStartLat()
    {
        return $this->container['start_lat'];
    }

    /**
     * Sets start_lat
     *
     * @param string $start_lat 起始坐标点纬度
     *
     * @return self
     */
    public function setStartLat($start_lat)
    {
        $this->container['start_lat'] = $start_lat;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time 结束坐标点时间
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets end_lng
     *
     * @return string
     */
    public function getEndLng()
    {
        return $this->container['end_lng'];
    }

    /**
     * Sets end_lng
     *
     * @param string $end_lng 结束坐标点经度
     *
     * @return self
     */
    public function setEndLng($end_lng)
    {
        $this->container['end_lng'] = $end_lng;

        return $this;
    }

    /**
     * Gets end_lat
     *
     * @return string
     */
    public function getEndLat()
    {
        return $this->container['end_lat'];
    }

    /**
     * Sets end_lat
     *
     * @param string $end_lat 结束坐标点纬度
     *
     * @return self
     */
    public function setEndLat($end_lat)
    {
        $this->container['end_lat'] = $end_lat;

        return $this;
    }

    /**
     * Gets total_distance
     *
     * @return int
     */
    public function getTotalDistance()
    {
        return $this->container['total_distance'];
    }

    /**
     * Sets total_distance
     *
     * @param int $total_distance 总距离，单位米
     *
     * @return self
     */
    public function setTotalDistance($total_distance)
    {
        $this->container['total_distance'] = $total_distance;

        return $this;
    }

    /**
     * Gets total_time
     *
     * @return int
     */
    public function getTotalTime()
    {
        return $this->container['total_time'];
    }

    /**
     * Sets total_time
     *
     * @param int $total_time 总时间，单位秒
     *
     * @return self
     */
    public function setTotalTime($total_time)
    {
        $this->container['total_time'] = $total_time;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return int
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param int $action_type 驾驶行为类型  1行驶 2静止 3未上报数据
     *
     * @return self
     */
    public function setActionType($action_type)
    {
        $this->container['action_type'] = $action_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


